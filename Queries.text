##training hour lister##
SELECT s.StaffName, th.traininghours
FROM staff s
JOIN traininghours th ON s.TrainingID = th.TrainingID;

#Build classes??##
-- Step 1: Identify available classes and their requirements
SELECT cr.ClassID, cr.ClassName, cr.Capacity, cr.NumberOfTeachers
FROM classrequirements cr
WHERE cr.Days LIKE '%Monday%' AND cr.Days LIKE '%Tuesday%' AND cr.Days LIKE '%Wednesday%' AND cr.Days LIKE '%Thursday%' AND cr.Days LIKE '%Friday%';

-- Step 2: Fetch children from the waiting list who meet the age requirements for each class
SELECT c.ChildID, c.ChildName, c.Gender, cr.ClassID
FROM children c
JOIN classrequirements cr ON c.DateOfBirth >= DATE_SUB(NOW(), INTERVAL cr.MaxAge YEAR) 
AND c.DateOfBirth <= DATE_SUB(NOW(), INTERVAL cr.MinAge YEAR);

-- Step 3: Balance the number of girls and boys in each class (considering available capacity)
-- You may need to perform calculations based on the number of children already assigned to each class.

-- Step 4: Assign children to teachers
-- You can assign children to teachers based on various criteria such as experience, workload, etc.
-- Use INSERT INTO statements to assign children to teachers.

## Imunization Verification ##

SELECT 
    ChildID,
    ChildName,
    CASE 
        WHEN Bluecard IS NOT NULL THEN 'Has Imunnizations'
        ELSE 'Does not have Imunnizations'
    END AS BluecardStatus
FROM 
    children;

## Insert Child on Registration List ##

INSERT INTO registration (RegistrationID, ChildID, Semester)
VALUES (RegistrationID_value, ChildID_value, Semester);


## TeacherClass Query ##
SELECT DISTINCT s.StaffName, cr.ClassName, cr.Days
FROM staff s
JOIN classrequirements cr ON s.ClassID = cr.ClassID;

## ParentsInfo Query ##
SELECT 
    p.ParentID,
    p.ParentName,
    p.ContactInfo,
    c.ChildName AS ChildName
FROM 
    parents p
JOIN 
    children c ON p.ChildID = c.ChildID;

## Pickup Query ##
SELECT *

FROM pickup

WHERE Qualified = 'Yes' (or 'No')

## 2nd Pickup Query ##
SELECT p.*, c.ChildName

FROM pickup p

JOIN children c ON p.ChildID = c.ChildID

WHERE p.Qualified = 'Yes';

## Children Age ##
SELECT 
    ChildID,
    ChildName,
    DateOfBirth,
    TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) AS AgeYears	
FROM 
    children;

## Teacher Traning Hours ##
SELECT s.StaffName, th.traninghours
FROM staff s
INNER JOIN traninghours th ON s.TrainingID = th.TraningID;

## Childern Has Blue Card ##
SELECT 
    c.ChildID,
    c.ChildName,
    c.Bluecard
FROM 
    children c
WHERE 
    c.Bluecard = 'Yes';

## Possible Class Assignments ##
SELECT 
    cr.ClassName,
    SUM(CASE WHEN c.Gender = 'Male' THEN 1 ELSE 0 END) AS Male_Count,
    SUM(CASE WHEN c.Gender = 'Female' THEN 1 ELSE 0 END) AS Female_Count,
    st.StaffName AS Teacher_Assigned
FROM 
    classrequirements cr
LEFT JOIN 
    sessionclasses sc ON cr.ClassID = sc.ClassID
LEFT JOIN 
    sessions s ON sc.SessionID = s.SessionID
LEFT JOIN 
    registration r ON sc.SessionClassID = r.SessionClassID
LEFT JOIN 
    children c ON r.ChildID = c.ChildID
LEFT JOIN 
    staff st ON cr.ClassID = st.ClassID
GROUP BY 
    cr.ClassName, st.StaffName;

## Testing ##
SELECT 
    cr.ClassName,
    SUM(CASE WHEN c.Gender = 'Male' THEN 1 ELSE 0 END) AS Male_Count,
    SUM(CASE WHEN c.Gender = 'Female' THEN 1 ELSE 0 END) AS Female_Count,
    st.StaffName AS Teacher_Assigned
FROM 
    classrequirements cr
LEFT JOIN 
    sessionclasses sc ON cr.ClassID = sc.ClassID
LEFT JOIN 
    sessions s ON sc.SessionID = s.SessionID
LEFT JOIN 
    registration r ON sc.SessionClassID = r.SessionClassID
LEFT JOIN 
    children c ON r.ChildID = c.ChildID
LEFT JOIN 
    staff st ON cr.ClassID = st.ClassID
GROUP BY 
    cr.ClassName, st.StaffName;

## Classes Query ##
SET @total_boys := (SELECT COUNT(*) FROM children WHERE Gender = 'Male');
SET @total_girls := (SELECT COUNT(*) FROM children WHERE Gender = 'Female');

CREATE TEMPORARY TABLE IF NOT EXISTS temp_boys AS
SELECT * FROM children WHERE Gender = 'Male';

CREATE TEMPORARY TABLE IF NOT EXISTS temp_girls AS
SELECT * FROM children WHERE Gender = 'Female';

CREATE TEMPORARY TABLE IF NOT EXISTS temp_class AS
SELECT ClassID, ClassName, Capacity - NumberOfTeachers AS available_seats FROM classrequirements;

SELECT * FROM temp_class;

WHILE (@total_boys > 0 AND @total_girls > 0) DO
    INSERT INTO temp_class (ClassID, ClassName, available_seats)
    SELECT ClassID, ClassName, available_seats - 1
    FROM temp_class
    WHERE available_seats > 0
    LIMIT 1;
    
    DELETE FROM temp_boys WHERE ChildID = (SELECT ChildID FROM temp_class ORDER BY RAND() LIMIT 1);
    DELETE FROM temp_girls WHERE ChildID = (SELECT ChildID FROM temp_class ORDER BY RAND() LIMIT 1);
    
    SET @total_boys := (SELECT COUNT(*) FROM temp_boys);
    SET @total_girls := (SELECT COUNT(*) FROM temp_girls);
END WHILE;

INSERT INTO temp_class (ClassID, ClassName, available_seats)
SELECT ClassID, ClassName, available_seats
FROM temp_class
WHERE available_seats > 0;

SELECT * FROM temp_class;

DROP TEMPORARY TABLE IF EXISTS temp_boys;
DROP TEMPORARY TABLE IF EXISTS temp_girls;

## THIS QUERY MIGHT BE GOOD ENOUGH FOR THE CLASS ONE ##
START TRANSACTION;

-- Sort children by age
SELECT * FROM children
ORDER BY DateOfBirth;

-- Get class requirement for all classes.
SELECT * FROM classrequirements;

-- Put children into classes maintaining even number of boys and girls
SELECT c.* 
FROM children c
JOIN (
    -- Select an even number of boys
    SELECT ChildID
    FROM (
        SELECT ChildID
        FROM children
        WHERE TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) BETWEEN 0.5 AND 1
        AND Gender = 'Male'
        ORDER BY DateOfBirth
        LIMIT 3
    ) boys

    UNION ALL

    -- Select an even number of girls
    SELECT ChildID
    FROM (
        SELECT ChildID
        FROM children
        WHERE TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) BETWEEN 0.5 AND 1
        AND Gender = 'Female'
        ORDER BY DateOfBirth
        LIMIT 3
    ) girls
) temp ON c.ChildID = temp.ChildID;

-- Gets the teachers for a class
SELECT s.*
FROM staff s
JOIN traininghours th ON s.TrainingID = th.TrainingID
WHERE th.traininghours > 20
LIMIT 2;

COMMIT;

