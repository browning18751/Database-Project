


## Build classes for section##

-- Step 2.1: Create a temporary table to handle assignments
CREATE TEMPORARY TABLE TempAssignments (
    ChildID INT,
    ClassID INT,
    Gender CHAR(1),
    Priority INT,
    Assigned BOOLEAN DEFAULT FALSE
);

-- Step 2.2: Insert children from the waiting list into TempAssignments
INSERT INTO TempAssignments (ChildID, ClassID, Gender, Priority)
SELECT w.ChildID, cr.ClassID, ch.Gender, w.Priority
FROM WaitingList w
JOIN Children ch ON w.ChildID = ch.ChildID
JOIN ClassRequirements cr ON cr.GenderBalance = TRUE
ORDER BY w.Priority ASC;

-- Step 2.3: Assign children to classes with gender balance
-- We will handle this by splitting the children into boys and girls, then interleaving them
CREATE TEMPORARY TABLE Boys AS 
SELECT ChildID, ClassID, Gender, Priority
FROM TempAssignments
WHERE Gender = 'M';

CREATE TEMPORARY TABLE Girls AS 
SELECT ChildID, ClassID, Gender, Priority
FROM TempAssignments
WHERE Gender = 'F';

SET @b:=0;
SET @g:=0;

INSERT INTO ClassAssignments (ChildID, ClassID)
SELECT ChildID, ClassID
FROM (
    SELECT ChildID, ClassID, @b := @b + 1 AS rank FROM Boys
    UNION ALL
    SELECT ChildID, ClassID, @g := @g + 1 AS rank FROM Girls
) AS Combined
ORDER BY ClassID, rank
LIMIT (SELECT MaxCapacity FROM Classes WHERE ClassID = Combined.ClassID);

-- Step 2.4: Assign a few children to teachers
-- Assuming we want to assign half of the children to teachers randomly
INSERT INTO ClassAssignments (ChildID, ClassID, TeacherID)
SELECT ChildID, ClassID, 
       (SELECT TeacherID FROM Teachers ORDER BY RAND() LIMIT 1)
FROM ClassAssignments
ORDER BY RAND()
LIMIT (SELECT COUNT(*) / 2 FROM ClassAssignments);

-- Clean up temporary tables
DROP TEMPORARY TABLE IF EXISTS TempAssignments;
DROP TEMPORARY TABLE IF EXISTS Boys;
DROP TEMPORARY TABLE IF EXISTS Girls;

## Imunization Verification ##

SELECT 
    ChildID,
    ChildName,
    CASE 
        WHEN Bluecard IS NOT NULL THEN 'Has Imunnizations'
        ELSE 'Does not have Imunnizations'
    END AS BluecardStatus
FROM 
    children;

## Insert Child on Registration List ##

INSERT INTO registration (RegistrationID, ChildID, SessionClassID, Gender)
VALUES (RegistrationID_value, ChildID_value, SessionClassID_value, Gender_value);


## TeacherClass Query ##
SELECT DISTINCT s.StaffName, cr.ClassName, cr.Days
FROM staff s
JOIN classrequirements cr ON s.ClassID = cr.ClassID;

## ParentsInfo Query ##
SELECT 
    p.ParentID,
    p.ParentName,
    p.ContactInfo,
    c.ChildName AS ChildName
FROM 
    parents p
JOIN 
    children c ON p.ChildID = c.ChildID;

## Pickup Query ##
SELECT *

FROM pickup

WHERE Qualified = 'Yes' (or 'No')

## 2nd Pickup Query ##
SELECT p.*, c.ChildName

FROM pickup p

JOIN children c ON p.ChildID = c.ChildID

WHERE p.Qualified = 'Yes';

## Children Age ##
SELECT 
    ChildID,
    ChildName,
    DateOfBirth,
    TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE()) AS AgeYears	
FROM 
    children;

## Teacher Traning Hours ##
SELECT s.StaffName, th.traninghours
FROM staff s
INNER JOIN traninghours th ON s.TrainingID = th.TraningID;

## Childern Has Blue Card ##
SELECT 
    c.ChildID,
    c.ChildName,
    c.Bluecard
FROM 
    children c
WHERE 
    c.Bluecard = 'Yes';

## Possible Class Assignments ##
SELECT 
    cr.ClassName,
    SUM(CASE WHEN c.Gender = 'Male' THEN 1 ELSE 0 END) AS Male_Count,
    SUM(CASE WHEN c.Gender = 'Female' THEN 1 ELSE 0 END) AS Female_Count,
    st.StaffName AS Teacher_Assigned
FROM 
    classrequirements cr
LEFT JOIN 
    sessionclasses sc ON cr.ClassID = sc.ClassID
LEFT JOIN 
    sessions s ON sc.SessionID = s.SessionID
LEFT JOIN 
    registration r ON sc.SessionClassID = r.SessionClassID
LEFT JOIN 
    children c ON r.ChildID = c.ChildID
LEFT JOIN 
    staff st ON cr.ClassID = st.ClassID
GROUP BY 
    cr.ClassName, st.StaffName;

## Testing ##
SELECT 
    cr.ClassName,
    SUM(CASE WHEN c.Gender = 'Male' THEN 1 ELSE 0 END) AS Male_Count,
    SUM(CASE WHEN c.Gender = 'Female' THEN 1 ELSE 0 END) AS Female_Count,
    st.StaffName AS Teacher_Assigned
FROM 
    classrequirements cr
LEFT JOIN 
    sessionclasses sc ON cr.ClassID = sc.ClassID
LEFT JOIN 
    sessions s ON sc.SessionID = s.SessionID
LEFT JOIN 
    registration r ON sc.SessionClassID = r.SessionClassID
LEFT JOIN 
    children c ON r.ChildID = c.ChildID
LEFT JOIN 
    staff st ON cr.ClassID = st.ClassID
GROUP BY 
    cr.ClassName, st.StaffName;

## Classes Query ##
SET @total_boys := (SELECT COUNT(*) FROM children WHERE Gender = 'Male');
SET @total_girls := (SELECT COUNT(*) FROM children WHERE Gender = 'Female');

CREATE TEMPORARY TABLE IF NOT EXISTS temp_boys AS
SELECT * FROM children WHERE Gender = 'Male';

CREATE TEMPORARY TABLE IF NOT EXISTS temp_girls AS
SELECT * FROM children WHERE Gender = 'Female';

CREATE TEMPORARY TABLE IF NOT EXISTS temp_class AS
SELECT ClassID, ClassName, Capacity - NumberOfTeachers AS available_seats FROM classrequirements;

SELECT * FROM temp_class;

WHILE (@total_boys > 0 AND @total_girls > 0) DO
    INSERT INTO temp_class (ClassID, ClassName, available_seats)
    SELECT ClassID, ClassName, available_seats - 1
    FROM temp_class
    WHERE available_seats > 0
    LIMIT 1;
    
    DELETE FROM temp_boys WHERE ChildID = (SELECT ChildID FROM temp_class ORDER BY RAND() LIMIT 1);
    DELETE FROM temp_girls WHERE ChildID = (SELECT ChildID FROM temp_class ORDER BY RAND() LIMIT 1);
    
    SET @total_boys := (SELECT COUNT(*) FROM temp_boys);
    SET @total_girls := (SELECT COUNT(*) FROM temp_girls);
END WHILE;

INSERT INTO temp_class (ClassID, ClassName, available_seats)
SELECT ClassID, ClassName, available_seats
FROM temp_class
WHERE available_seats > 0;

SELECT * FROM temp_class;

DROP TEMPORARY TABLE IF EXISTS temp_boys;
DROP TEMPORARY TABLE IF EXISTS temp_girls;

